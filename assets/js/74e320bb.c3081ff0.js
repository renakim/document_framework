"use strict";(self.webpackChunkwi_znet_documentation=self.webpackChunkwi_znet_documentation||[]).push([[5654],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(r),m=i,h=d["".concat(p,".").concat(m)]||d[m]||s[m]||a;return r?n.createElement(h,l(l({ref:t},u),{},{components:r})):n.createElement(h,l({ref:t},u))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},54237:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var n=r(87462),i=(r(67294),r(3905));const a={id:"adc",title:"Analog to Digital Converter (ADC)",date:new Date("2020-06-10T00:00:00.000Z")},l=void 0,o={unversionedId:"Product/iMCU/W7500/Peripherals-internal/adc",id:"Product/iMCU/W7500/Peripherals-internal/adc",title:"Analog to Digital Converter (ADC)",description:"Introduction",source:"@site/docs/Product/iMCU/W7500/Peripherals-internal/adc.md",sourceDirName:"Product/iMCU/W7500/Peripherals-internal",slug:"/Product/iMCU/W7500/Peripherals-internal/adc",permalink:"/Product/iMCU/W7500/Peripherals-internal/adc",draft:!1,editUrl:"https://github.com/Wiznet/document_framework/tree/master/docs/Product/iMCU/W7500/Peripherals-internal/adc.md",tags:[],version:"current",frontMatter:{id:"adc",title:"Analog to Digital Converter (ADC)",date:"2020-06-10T00:00:00.000Z"},sidebar:"docs",previous:{title:"Library and Peripheral Example",permalink:"/Product/iMCU/W7500/libraries-examples"},next:{title:"Alternate Function Controller (AFC)",permalink:"/Product/iMCU/W7500/Peripherals-internal/afc"}},p={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Features",id:"features",level:2},{value:"Functional description",id:"functional-description",level:2},{value:"Operation ADC with non interrupt",id:"operation-adc-with-non-interrupt",level:3},{value:"Operation ADC with interrupt",id:"operation-adc-with-interrupt",level:3},{value:"Peripheral_Examples",id:"peripheral_examples",level:2}],u={toc:c};function s(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"ADC is a 12bit analog-to-digital converter. It has up to 9 multiplexed channels allowing to measure signals from 8 externals and 1 internal source.\nADC of various channels can be performed in single mode. The result of the ADC is stored in 12 bit register."),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"12bit configuration resolution"),(0,i.kt)("li",{parentName:"ul"},"Conversion time : Max 10MHz (Sampling time can be programmable)"),(0,i.kt)("li",{parentName:"ul"},"8 channel for external analog inputs",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"CH0 : PC_15"),(0,i.kt)("li",{parentName:"ul"},"CH1 : PC_14"),(0,i.kt)("li",{parentName:"ul"},"CH2 : PC_13"),(0,i.kt)("li",{parentName:"ul"},"CH3 : PC_12"),(0,i.kt)("li",{parentName:"ul"},"CH4 : PC_11"),(0,i.kt)("li",{parentName:"ul"},"CH5 : PC_10"),(0,i.kt)("li",{parentName:"ul"},"CH6 : PC_09"),(0,i.kt)("li",{parentName:"ul"},"CH7 : PC_08"))),(0,i.kt)("li",{parentName:"ul"},"1 channel for internal LDO(1.5v) voltage.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"CH15 : Internal voltage"))),(0,i.kt)("li",{parentName:"ul"},"Start of conversion can be initiated by software."),(0,i.kt)("li",{parentName:"ul"},"Convert selected inputs once per trigger."),(0,i.kt)("li",{parentName:"ul"},"Interrupt generation at the end of conversion.")),(0,i.kt)("h2",{id:"functional-description"},"Functional description"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Figure 1 ADC block diagram",src:r(69462).Z,width:"1062",height:"620"})),(0,i.kt)("h3",{id:"operation-adc-with-non-interrupt"},"Operation ADC with non interrupt"),(0,i.kt)("p",null,"The below Figure shows the flowchart of ADC operation with non-interrupt.",(0,i.kt)("br",{parentName:"p"}),"\n","ADC can be used as below:  "),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"ADC needs to be initialized before operation.",(0,i.kt)("br",{parentName:"li"}),"To initialize the ADC, clear the PWD bit first.  "),(0,i.kt)("li",{parentName:"ol"},"Select the ADC channel from 0 to 7 and 15 (initial core voltage).  "),(0,i.kt)("li",{parentName:"ol"},"Run start ADC conversion by set ADC_SRT bit.  "),(0,i.kt)("li",{parentName:"ol"},"Check INT bit to know finish of conversion.  "),(0,i.kt)("li",{parentName:"ol"},"If INT bit is high (1), read ADC conversion data.  "),(0,i.kt)("li",{parentName:"ol"},"Finally, ADC operation is finished by setting the PWD bit.  ")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Figure 2 ADC flow chart",src:r(62635).Z,width:"935",height:"874"})),(0,i.kt)("h3",{id:"operation-adc-with-interrupt"},"Operation ADC with interrupt"),(0,i.kt)("p",null,"The below Figure shows the flowchart of ADC operation with interrupt.\nOperation is almost the same as the non-interrupt mode except checking INT register to know when enabling interrupt mask bit and conversion is completed. "),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Figure 3 ADC flow chart2",src:r(41523).Z,width:"741",height:"846"})),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"peripheral_examples"},"Peripheral_Examples"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/Product/iMCU/W7500/Peripherals-internal/illumination-sensor"},"ADC Illumination example"))))}s.isMDXComponent=!0},69462:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/adc_block_diagram-467428fd6d6b6301f73e0fa7bc3f87a8.jpg"},62635:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/adc_flow_chart-4fe9d1ee2fe2ae50d0406ef23f7b985a.jpg"},41523:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/adc_flow_chart2-a3ac8debd28142487715088da51c533f.jpg"}}]);