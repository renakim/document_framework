"use strict";(self.webpackChunkwi_znet_documentation=self.webpackChunkwi_znet_documentation||[]).push([[2565],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},66176:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const o={id:"overview",title:"Overview",date:new Date("2021-07-15T00:00:00.000Z")},i=void 0,l={unversionedId:"Product/iEthernet/W5300/overview",id:"Product/iEthernet/W5300/overview",title:"Overview",description:"Hardwired Dual TCP/IP Stack Controller",source:"@site/docs/Product/iEthernet/W5300/Overview.md",sourceDirName:"Product/iEthernet/W5300",slug:"/Product/iEthernet/W5300/overview",permalink:"/Product/iEthernet/W5300/overview",draft:!1,editUrl:"https://github.com/Wiznet/document_framework/tree/master/docs/Product/iEthernet/W5300/Overview.md",tags:[],version:"current",frontMatter:{id:"overview",title:"Overview",date:"2021-07-15T00:00:00.000Z"},sidebar:"docs",previous:{title:"W5300",permalink:"/Product/iEthernet/W5300/"},next:{title:"Documents",permalink:"/Product/iEthernet/W5300/document"}},c={},s=[{value:"Features",id:"features",level:2}],u={toc:s};function p(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(88432).Z,width:"280",height:"288"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Hardwired Dual TCP/IP Stack Controller")),(0,a.kt)("p",null,"The W5300 chip is a Hardwired TCP/IP embedded Ethernet controller that enables easier internet connection for embedded systems that require high network performance."),(0,a.kt)("p",null,"W5300 suits users in need of stable internet connectivity best, using a single chip to implement TCP/IP Stack, 10/100 Ethernet MAC and PHY. Hardwired TCP/IP stack supports TCP, UDP, IPv4, ICMP, ARP, IGMP, and PPPoE, \u2026, which has been proven through various applications over many years. W5300 uses a 128Kbytes internal buffer as its data communication memory."),(0,a.kt)("p",null,"By using W5300, users can implement the Ethernet application they need by using a simple socket program instead of handling a complex Ethernet Controller. It is possible to use 8 independent hardware sockets simultaneously. BUS (Direct & Indirect) is provided for easy integration with the external MCU. The W5300 supports max. 80Mbps network throughput."),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(80640).Z,width:"580",height:"776"})),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"features"},"Features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Hardwired TCP/IP protocols : TCP, UDP, ICMP, IPv4, ARP, IGMP, PPPoE"),(0,a.kt)("li",{parentName:"ul"},"Un-attackable hardware network engine for preventing network attacks such as flooding, spoofing, injection"),(0,a.kt)("li",{parentName:"ul"},"Host Interface : 8/16 bit Data Bus (Direct & Indirect Address Mode)"),(0,a.kt)("li",{parentName:"ul"},"High Network Performance : Max 80Mbps (by DMA)"),(0,a.kt)("li",{parentName:"ul"},"Support embedded OS driver : Linux (kernel 2.6.24)"),(0,a.kt)("li",{parentName:"ul"},"8 Independent hardware socket"),(0,a.kt)("li",{parentName:"ul"},"Internal 128Kbytes memory for TCP/IP packet processing"),(0,a.kt)("li",{parentName:"ul"},"Flexible memory allocation"),(0,a.kt)("li",{parentName:"ul"},"10BaseT / 100Base TX Ethernet PHY Embedded"),(0,a.kt)("li",{parentName:"ul"},"Support Auto-Negotiation (Full & Half Duplex, 10 & 100 Based)"),(0,a.kt)("li",{parentName:"ul"},"Support Auto-MDIX"),(0,a.kt)("li",{parentName:"ul"},"3.3V Operation with 5V I/O signal tolerance"),(0,a.kt)("li",{parentName:"ul"},"LED outputs (TX, RX, full/half duplex, Collision link speed)"),(0,a.kt)("li",{parentName:"ul"},"100LQFP lead-free package (14x14mm)")),(0,a.kt)("hr",null))}p.isMDXComponent=!0},88432:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/w5300_280-b8781ae79f13c4de2c9ea5cf0f6f6d8c.jpg"},80640:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/w5500_blockdiagram-6d6dc797705fcdf581bc42592eb7d36a.jpg"}}]);